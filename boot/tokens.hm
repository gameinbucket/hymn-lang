import "${std}/hashset" (new_str_set)

const token_int_literal     = "int-v"
const token_float_literal   = "float-v"
const token_string_literal  = "string-v"
const token_char_literal    = "char-v"
const token_byte_literal    = "byte-v"
const token_boolean_literal = "bool-v"
const token_int             = "int"
const token_int8            = "int8"
const token_int16           = "int16"
const token_int32           = "int32"
const token_int64           = "int64"
const token_uint            = "uint"
const token_uint8           = "uint8"
const token_uint16          = "uint16"
const token_uint32          = "uint32"
const token_uint64          = "uint64"
const token_float           = "float"
const token_float32         = "float32"
const token_float64         = "float64"
const token_string          = "string"
const token_raw_string      = "string-raw"
const token_char            = "char"
const token_byte            = "byte"
const token_boolean         = "bool"

const words = new_str_set()
const primitives = new_str_set()

def init
    words.add("import")
    words.add("macro")

    primitives.add("int")
    primitives.add("float")

def digit(c char) bool
    match c
        '0' | '1' | '2' | '3' |
        '4' | '5' | '6' | '7' |
        '8' | '9' => return true
        _ => pass
    return false

class token
    depth int
    name  string
    value string

def token.to_string() string
    mutable s = "{depth:" + str(self.depth) + ", type:" + self.name
    if self.value != ""
        s += ", value:" + self.value
    s += "}"
    return s
