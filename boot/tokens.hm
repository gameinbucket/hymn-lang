import std:hashset (new_str_set)

static token_int_literal     = "int-v"
static token_float_literal   = "float-v"
static token_string_literal  = "string-v"
static token_char_literal    = "char-v"
static token_byte_literal    = "byte-v"
static token_boolean_literal = "bool-v"
static token_int             = "int"
static token_int8            = "int8"
static token_int16           = "int16"
static token_int32           = "int32"
static token_int64           = "int64"
static token_uint            = "uint"
static token_uint8           = "uint8"
static token_uint16          = "uint16"
static token_uint32          = "uint32"
static token_uint64          = "uint64"
static token_float           = "float"
static token_float32         = "float32"
static token_float64         = "float64"
static token_string          = "string"
static token_raw_string      = "string-raw"
static token_char            = "char"
static token_byte            = "byte"
static token_boolean         = "bool"

static words = new_str_set()
static primitives = new_str_set()

words.add("import")
words.add("macro")

primitives.add("int")
primitives.add("float")

def digit(c char) bool
    match c
        '0' | '1' | '2' | '3' |
        '4' | '5' | '6' | '7' |
        '8' | '9' => return true
        _ => pass
    return false

class token
    depth int
    name  string
    value string

def token.to_string() string
    mutable s = "{depth:" + str(self.depth) + ", type:" + self.name
    if self.value != ""
        s += ", value:" + self.value
    s += "}"
    return s

def new(depth int, name string) token
    return token(depth, name, "")
