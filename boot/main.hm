#
#           The Hymn Compiler
# Copyright 2019 Nathan Michael McMillan
#

import program
import flags (flags)
import parsing_errors (parse_error)

import std:result (result)
import std:paths

static debug = true
static debug_tokens = true
static debug_ast = true
static debug_command = true

def exec_compile(flag flags) result<string,parse_error>
    out = paths.abs(flag.write_to)
    echo(out)
    p = program.new()
    p.parse(flag)
    return result.ok("")

def help
    echo("Hymn command line interface.")
    echo("")
    echo("Usage:")
    echo("")
    echo("    hymn <command> [arguments]")
    echo("")
    echo("The commands are:")
    echo("")
    echo("    fmt      format a file")
    echo("    build    compile a program")
    echo("")

def main(args []string)

    iterate i, a in args
        printf("args %d: %s\n", i, a)
    
    flag = flags.new()
    flag.path = "src/boot/main/main.c"
    flag.write_to = "write_to..."

    if flag.help or flag.path == ""
        help()
        exit(1)

    ok = exec_compile()
    

    if ok is error(e)
        echo("error: " + e.value.to_string())
        exit(1)

    if ok is ok(r)
        echo(r.value)
