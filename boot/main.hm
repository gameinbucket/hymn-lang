#
#           The Hymn Compiler
# Copyright 2019 Nathan Michael McMillan
#

# import "${std}/either" (either)
import "/home/Documents/programming/hymn-lang/std/either"
import "${std}/paths"
import "program"
import "flags" (new, flags)
import "parsing_errors" (parse_error)

const debug = true
const debug_tokens = true
const debug_ast = true
const debug_command = true

def exec_compile(flag flags) either<string,parse_error>
    out = paths.abs(flag.write_to)
    p = program.new()
    p.parse(flag)
    return either.left("")

# todo
# if a module shares the same name as an enum inside it
# then the enum member names must not conflict with anything else in the module 

def help
    echo("Hymn command line interface.")
    echo("")
    echo("Usage:")
    echo("")
    echo("    hymn <command> [arguments]")
    echo("")
    echo("The commands are:")
    echo("")
    echo("    fmt      format a file")
    echo("    build    compile a program")
    echo("")

def main(args []string)

    iterate i, a in args
        printf("args %d: %s\n", i, a)
    
    flag = flags.new()
    flag.path = "./main.c"
    flag.write_to = "write_to..."

    if flag.help or flag.path == "" or flag.hmlib == ""
        help()
        exit(1)

    result = exec_compile()
    
    # if result is parse_error(e)
    if result is right(r)
        echo(r.value.out())
        exit(1)
