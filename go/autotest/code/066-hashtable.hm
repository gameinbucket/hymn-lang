const uint64_max = uint64 2000000

int_hashcode(key int) int
	return key

string_hashcode(key string) int
	mutable pos = 0
	mutable value = uint64 0
	length = len(key)
	while value < uint64_max and pos < length
		value = (value << uint64 8) + uint64 key[pos]
		pos += 1
	return int value

type hashtable_item<k,v>
	code  int
	key   k
	value v
	next  maybe<hashtable_item<k,v>>

type hashtable<k,v>
	size     int
	capacity int
	get_code (k) int
	table    []maybe<hashtable_item<k,v>>

hashtable get_bin(code int) int
	return code % self.capacity

hashtable set(key k, value v)
	code = self.get_code(key)
	bin = self.get_bin(code)
	mutable element = self.table[bin]
	mutable previous = none<hashtable_item<k,v>>
	while element is some(s)
		if code == s.code
			s.value = value
			return
		previous = element
		element = s.next
	item = hashtable_item(code, key, value, none)
	match previous
		some(s) => s.next = item
		none => self.table[bin] = item
	self.size += 1

hashtable get(key k) maybe<v>
	code = self.get_code(key)
	bin = self.get_bin(code)
	mutable element = self.table[bin]
	while element is some(s)
		if code == s.code
			return s.value
		element = s.next
	return none

hashtable has(key k) bool
	return self.get(key) is some

hashtable delete(key k) maybe<v>
	code = self.get_code(key)
	bin = self.get_bin(code)
	mutable element = self.table[bin]
	mutable previous = none<hashtable_item<k,v>>
	while element is some(s)
		if code == s.code
			match previous
				some(p) => p.next = s.next
				none => self.table[bin] = s.next
			self.size -= 1
			return s.value
		previous = element
		element = s.next
	return none

hashtable clear()
	iterate i, _ in self.table
		self.table[i] = none
	self.size = 0

main
	m = hashtable(
		capacity: 12
		get_code: int_hashcode
		table: [12:]maybe<hashtable_item<int,string>>)

	m.set(0, "kiwi")
	match m.get(0)
		some(out) => echo(out)
		none => echo("bad")
	echo("size: " + to_str(m.size))
	echo("---")

	m.set(0, "lemon")
	match m.get(0)
		some(out) => echo(out)
		none => echo("bad")
	echo("size: " + to_str(m.size))
	echo("---")

	m.set(4, "coconut")
	match m.get(4)
		some(out) => echo(out)
		none => echo("bad")
	echo("size: " + to_str(m.size))
	echo("---")

	if m.delete(0) is none : echo("bad")
	if m.get(0) is some : echo("bad")
	echo("size: " + to_str(m.size))
	echo("---")

	m.set(5, "banana")
	m.set(8, "eggplant")
	m.set(13, "pickle")
	m.set(20, "cucumber")
	if m.get(4) is none : echo("bad")
	if m.get(5) is none : echo("bad")
	if m.get(8) is none : echo("bad")
	if m.get(13) is none : echo("bad")
	if m.get(20) is none : echo("bad")
	echo("size: " + to_str(m.size))
	echo("---")

	m.clear()
	if m.get(0) is some : echo("bad")
	echo("size: " + to_str(m.size))
	echo("---")
