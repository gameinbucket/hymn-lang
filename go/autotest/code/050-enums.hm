import "math"

type vec
	x int
	y int

type exception
	message string
	stack   string

enum snake
	python
	viper
	cobra

enum mammal
	mouse(int, string, vec)
	cat(string)
	dog(float)

enum bug<x>
	ant(x)
	bee
  
enum result<r>
	value(r)
	error(exception)
  
enum either<u, v>
	one(u)
	two(v)

immutable example = vec()
immutable snap = snake.viper
immutable woof = mammal.dog(7.2)

calc_me(x int) either<int, float>
	if x < 10
		i = either<int, float>.one(6432)
		return i
	f = either<int, float>.two(5329.5)
	return f

omega_add() math.operation
	return math.operation.add

main
	a = snake.cobra
	b = snake.viper
	if a == b
		echo("bad")
	else
		echo("good")

	z = [10]snake
	z[0] = snake.python
	z[1] = snake.viper
	z[2] = snake.cobra

	c = mammal.cat("meow")
	d = mammal.cat("woof")

	example2 = vec()

	e = mammal.dog(1.4)
	echo("doggo " + to_str(e.0))

	me = calc_me(5)
	if not me is int: echo("no!")

	g = bug<int>.bee
	h = bug.ant(true)
	i = bug.ant(vec())
	j = bug.ant("buggie")

	omega = omega_add()
	match omega
		add => echo("omega: good")
		_ => echo("omega: not good")
	if omega is add : echo("omega: extra good")
