import hymn:math

class vec
    x int
    y int

class exception
    message string
    stack   string

enum snake
    python
    viper
    cobra

enum mammal
    mouse (
        a int
        b string
        c vec
    )
    cat(cat string)
    dog(type float)
    dolphin(a string, b string)

enum bug<x>
    ant(data x)
    bee()
  
enum result<r>
    value(result r)
    error(err exception)
  
enum either<u,v>
    one(first u)
    two(second v)

static example = vec()
static snap = snake.viper
static woof = mammal.dog(type:7.2)

def calc_me(x int) either<int,float>
    if x < 10
        i = either<int,float>.one(first:6432)
        return i
    return either.two(
        second: 5329.5
    )

def omega_add() math.operation
    return math.operation.add

def main

    z = [10]snake
    z[0] = snake.python
    z[1] = snake.viper
    z[2] = snake.cobra

    d = mammal.cat(cat:"woof")
    echo(d.cat)

    doggo = mammal.dog(1.4)
    echo("doggo " + str(doggo.type))

    me = calc_me(5)
    if not me is one: echo("no!")

    g = bug<int>.bee()
    if g is bee: echo("buzz!")

    h = bug.ant(true)
    if h is ant: echo(h.data)

    i = bug.ant(vec())
    if i is ant: echo("snip!")

    j = bug.ant("buggie")
    if j is ant: echo(j.data)

    omega = omega_add()
    match omega
        add: echo("omega: good")
        _: echo("omega: not good")
    if omega is add : echo("omega: extra good")

    fin = mammal.dolphin("x1", "y1")
    phin = mammal.dolphin(a:"x2", b:"y2")
    dol = mammal.dolphin(
        a: "x3"
        b: "y3"
    )
    blank = mammal.dolphin()

    echo("fin := " + fin.a)
    echo("phin := " + phin.a)
    echo("dol := " + dol.a)
    echo("blank <[" + blank.a + "]>")

    mutable f = either<int, float>.two(
        second: 5329.5
    )
    f = either.two(6315.1)
    echo("second :=", int(f.second))
