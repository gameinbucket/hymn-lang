type vec
  x int 
  y int
  z int

type bar
  ge maybe<vec>
  ne maybe<bar>

foo(in maybe<vec>) maybe<vec>
  match in
    some => echo("foo some " + string(in.x))
    none => echo("foo none")
  return in

zoo(in vec) maybe<vec>
  in.x = 2
  return in

moo(in none<vec>) maybe<vec>
  return in

main
  a = none<vec>
  b = vec
  c = foo(a)
  d = foo(b)
  e = zoo(b)
  f = moo(a)
  g = none<bar>
  h = bar(a, g)

  match e
    some => echo("oh no")
    none => echo("none")

  match f
    some => echo("some " + string(f.x))
    none => echo("oh no")

  match e
    some =>
      echo("x " + string(e.x))
      echo("y " + string(e.y))
      echo("z " + string(e.z))
    none => pass

  match f
    none => echo("oh no")
    some => pass
