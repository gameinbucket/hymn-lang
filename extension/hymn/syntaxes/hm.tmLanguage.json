{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Hymn",
	"scopeName": "source.hymn",
	"patterns": [
		{
			"begin": "^inline$",
			"end": "^end$",
			"captures": {
				"0": {
					"name": "keyword.struct.hymn"
				}
			},
			"contentName": "embedded.c.hymn",
			"patterns": [
				{
					"match": "//.*$",
					"name": "comment.line.double-slash.c.hymn"
				},
				{
					"match": "(#include) (.*)$",
					"captures": {
						"1": {
							"name": "keyword.control.directive.include.c.hymn"
						},
						"2": {
							"name": "string.quoted.other.lt-gt.include.c.hymn"
						}
					}
				},
				{
					"match": "(#(?:ifndef|define|endif))(?:$|( .*$))",
					"captures": {
						"1": {
							"name": "keyword.control.directive.include.c.hymn"
						},
						"2": {
							"name": "entity.name.function.preprocessor.c.hymn"
						}
					}
				},
				{
					"match": "\\b(char|int|float)\\b",
					"captures": {
						"1": {
							"name": "storage.type.numeric.c.hymn"
						}
					}
				},
				{
					"match": "\\b(struct)\\b",
					"captures": {
						"1": {
							"name": "storage.type.struct.c.hymn"
						}
					}
				}
			]
		},
		{
			"match": "#.*$",
			"name": "comment.line.double-slash.hymn"
		},
		{
			"match": "'(.*?)'",
			"captures": {
				"0": {
					"name": "string.quoted.hymn"
				},
				"1": {
					"name": "constant.other.rune.hymn"
				}
			}
		},
		{
			"match": "\".*?\"",
			"name": "string.quoted.double.hymn",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape.hymn"
						}
					]
				}
			}
		},
		{
			"match": "\\b(self)\\b",
			"captures": {
				"1": {
					"name": "variable.language.this.hymn"
				}
			}
		},
		{
			"match": "\\b(mutable|immutable|const)\\b",
			"captures": {
				"1": {
					"name": "storage.modifier.hymn"
				}
			}
		},
		{
			"match": "\\b(import|as)\\b",
			"captures": {
				"1": {
					"name": "keyword.import.hymn"
				}
			}
		},
		{
			"match": "\\b(true|false|null)\\b",
			"captures": {
				"1": {
					"name": "constant.language.hymn"
				}
			}
		},
		{
			"match": "\\b(maybe|some|none)\\b",
			"captures": {
				"1": {
					"name": "entity.name.type.hymn"
				}
			}
		},
		{
			"match": "\\b(char|byte|int|int8|int16|int32|int64|uint|uint8|uint16|uint32|uint64|float|float32|float64)\\b",
			"captures": {
				"1": {
					"name": "storage.type.numeric.hymn"
				}
			}
		},
		{
			"match": "\\b(bool)\\b",
			"captures": {
				"1": {
					"name": "storage.type.boolean.hymn"
				}
			}
		},
		{
			"match": "\\b(string)\\b",
			"captures": {
				"1": {
					"name": "storage.type.string.hymn"
				}
			}
		},
		{
			"match": "\\b(if|elif|else|for|while|return|break|continue|and|or|not|match|is|pass|goto|label|iterate|in|async|await|yield)\\b",
			"captures": {
				"1": {
					"name": "keyword.control.hymn"
				}
			}
		},
		{
			"match": "^(class|enum|def) +(\\w+)",
			"captures": {
				"1": {
					"name": "keyword.struct.hymn"
				},
				"2": {
					"name": "entity.name.type.hymn"
				}
			}
		},
		{
			"match": "^(\\w+) (\\w+) *($|\\(| )",
			"captures": {
				"1": {
					"name": "entity.name.function.hymn"
				},
				"2": {
					"name": "entity.name.function.hymn"
				}
			}
		},
		{
			"match": "^(\\w+) *($|\\(| )",
			"captures": {
				"1": {
					"name": "entity.name.function.hymn"
				}
			}
		},
		{
			"match": "(\\w+) *(\\(|<)",
			"captures": {
				"1": {
					"name": "support.function.hymn"
				}
			}
		},
		{
			"match": "\\.(\\w+) *\\(",
			"captures": {
				"1": {
					"name": "support.function.hymn"
				}
			}
		},
		{
			"match": "\\b([0-9]+(?:\\.[0-9]+)?)\\b",
			"captures": {
				"1": {
					"name": "constant.numeric.decimal.hymn"
				}
			}
		},
		{
			"match": "\\b(>=|<=|!=|<|>|==)\\b",
			"captures": {
				"1": {
					"name": "keyword.operator.comparison.hymn"
				}
			}
		},
		{
			"match": "(\\w+(?:\\.\\w+)*) *(?:=|\\+=|-=|\/=|\\*=|\\^=|\\|=|&=|<<=|>>=) ",
			"captures": {
				"1": {
					"name": "variable.other.assignment.hymn"
				}
			}
		}
	]
}
