{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "hymn",
	"scopeName": "source.hymn",
	"patterns": [{
		"explanation": "comments",
		"begin": "#",
		"end": "\\n",
		"name": "comment.line.double-slash.hymn"
	}, {
		"explanation": "self",
		"match": "\\bself\\b",
		"name": "variable.language.this.hymn"
	}, {
		"explanation": "class",
		"match": "^(class) +([a-zA-Z]+)",
		"captures": {
			"1": {
				"name": "keyword.struct.hymn"
			},
			"2": {
				"name": "entity.name.type.hymn"
			}
		}
	}, {
		"explanation": "modifiers",
		"match": "\\b(mutable|immutable)\\b",
		"name": "storage.modifier.hymn"
	}, {
		"explanation": "booleans",
		"match": "\\b(true|false|null)\\b",
		"name": "constant.language.hymn"
	}, {
		"explanation": "numerics",
		"match": "(?: +|,|\\[)(int32|int64|int|float32|float64|float)(?:$| +|,|\\])",
		"captures": {
			"1": {
				"name": "storage.type.numeric.hymn"
			}
		}
	}, {
		"explanation": "boolean",
		"match": "(?: +|,|\\[)(bool)(?:$| +|,|\\])",
		"captures": {
			"1": {
				"name": "storage.type.boolean.hymn"
			}
		}
	}, {
		"explanation": "string",
		"match": "(?: +|,|\\[)(string)(?:$| +|,|\\])",
		"captures": {
			"1": {
				"name": "storage.type.string.hymn"
			}
		}
	}, {
		"explanation": "flow",
		"name": "keyword.control.hymn",
		"match": "\\b(if|elif|else|for|return|break|continue|and|or)\\b"
	}, {
		"explanation": "functions",
		"match": "^([a-zA-Z]+)($|\\()",
		"captures": {
			"1": {
				"name": "entity.name.function.hymn"
			}
		}
	}, {
		"explanation": "call",
		"match": "\\.([a-zA-Z]+)",
		"captures": {
			"1": {
				"name": "support.function.hymn"
			}
		}
	}, {
		"explanation": "assignment",
		"match": "^ +([a-zA-Z]+(?:\\.[a-zA-Z]+)*)(?: +)?(?:=|\\+=|-=|\/=|\\*=)",
		"captures": {
			"1": {
				"name": "variable.other.assignment.hymn"
			}
		}
	}, {
		"explanation": "numbers",
		"match": "[0-9]+(.[0-9]+)?",
		"name": "constant.numeric.decimal.hymn"
	}, {
		"explanation": "comparison",
		"match": "(if|for|=).* (>=|<=|!=|<|>|=) ",
		"captures": {
			"2": {
				"name": "keyword.operator.comparison.hymn"
			}
		}
	}, {
		"explanation": "quotes",
		"name": "string.quoted.double.hymn",
		"begin": "\"",
		"end": "\"",
		"patterns": [{
			"name": "constant.character.escape.hymn",
			"match": "\\\\."
		}]
	}]
}
