import "math"

class vec
    x int
    y int

class exception
    message string
    stack   string

enum snake
    python
    viper
    cobra

enum mammal
    mouse (
        a int
        b string
        c vec
    )
    cat(cat string)
    dog(type float)
    dolphin(a string, b string)

enum bug<x>
    ant(data x)
    bee()
  
enum result<r>
    value(result r)
    error(err exception)
  
enum either<u,v>
    one(first u)
    two(second v)

const example = vec()
const snap = snake.viper
const woof = mammal.dog(type:7.2)

function calc_me(x int) either<int,float>
    if x < 10
        i = either<int,float>.one(first:6432)
        return i
    f = either.two(
        second: 5329.5
    )
    return f

function omega_add() math.operation
    return math.operation.add

function main
    a = snake.cobra
    b = snake.viper
    if a == b: echo("bad")
    else: echo("good")

    z = [10]snake
    z[0] = snake.python
    z[1] = snake.viper
    z[2] = snake.cobra

    c = mammal.cat(cat:"meow")
    d = mammal.cat(cat:"woof")

    example2 = vec()

    doggo = mammal.dog(1.4)
    echo("doggo " + to_str(doggo.type))

    me = calc_me(5)
    if not me is one : echo("no!")

    g = bug<int>.bee()
    h = bug.ant(true)
    i = bug.ant(vec())
    j = bug.ant("buggie")

    omega = omega_add()
    match omega
        add => echo("omega: good")
        _ => echo("omega: not good")
    if omega is add : echo("omega: extra good")

    fin = mammal.dolphin("x1", "y1")
    phin = mammal.dolphin(a:"x2", b:"y2")
    dol = mammal.dolphin(
        a: "x3"
        b: "y3"
    )
    blank = mammal.dolphin()

    echo(fin.a)
    echo(phin.a)
    echo(dol.a)
    echo("auto [" + blank.a + "]")
