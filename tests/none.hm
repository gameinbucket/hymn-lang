type attribute<v>
  on  bool
  has <v>

type vec
  x int 
  y int
  z int

type foo
  a vec
  b vec
  c vec
    
type bar
  a maybe<vec>
  b maybe<vec>
  c int

newVec4()
  v = vec
    x: 0
    y: 0
    z: 0
  return v

newVec3()
  return vec(x:0, y:0, z:0)

newVec2()
  return vec(0, 0, 0)

newVec1()
  return vec

newAttrVec() attribute<attribute<vec>>
  a = attribute<attribute<vec>>
    on: true
    has: attribute<vec>
      on: true
      has: vec
  return a

gleb(ptr vec) foo
  f = foo
    a: vec(1, 2, 3)
    b: ptr
    c: newVec1()
  return f

glob() bar
  b = bar
    a: none
    b: vec
    c: 0
  return b

stuff(x int) maybe<vec>
  if x < 10
    return some(vec(x:3, y:4, z:5))
  return none

init_vec(a int, b int, c int) vec
  v = vec(a, b, 0)
  v.c = c * c
  return v

main
  a = none<vec>
  b = some(vec)

  c = [10]init_vec(3, 5, 7)

  match a
    some(v) => echo(v.x)
    none => echo("good!")

  match b
    some(v) => echo(v.x)
    none => echo("bad!")

  c = b.get()
  echo(c.x)

  s = stuff(8)
  match s
    some(v) => echo(v.x)
    none => echo("good!")
