immutable uint64_max = uint64 2000000

int_hashcode(key int) int
	return key

string_hashcode(key string) int
	mutable pos = 0
	mutable value = uint64 0
	length = len(key)
	for value < uint64_max and pos < length
		value = (value << uint64 8) + uint64 key[pos]
		pos += 1
	return int value

type hashtable_item<k, v>
	code  int
	key   k
	value v
	next  maybe<hashtable_item<k,v>>

type hashtable<k, v>
	size     int
	capacity int
	get_code (k) int
	table    []maybe<hashtable_item<k,v>>

hashtable get_bin(code int) int
	return code % self.capacity

hashtable set(key k, value v)
	code = self.get_code(key)
	bin = self.get_bin(code)
	search = self.table[bin]
	mutable current = search
	mutable previous = none<hashtable_item<k,v>>
	if current is some(s)
		if code == s.code
			s.value = value
			return
	(* fix this ... *)
	for current is some(s)
		if code != s.code
			break
		previous = current
		current = s.next
	if current is some(s)
		if code == s.code
			s.value = value
			return
	element = hashtable_item(code, key, value, _)
	if current == search
		element.next = current
		self.table[bin] = element
	elif current is none
		match previous
			some(s) => s.next = element
			none => echo("panic!")
	else
		element.next = current
		match previous
			some(s) => s.next = element
			none => echo("panic!")
	self.size += 1

hashtable get(key k) maybe<v>
	code = self.get_code(key)
	bin = self.get_bin(code)
	mutable element = self.table[bin]
	for element is some(s)
		if code == s.code
			return s.value
		element = s.next
	return none

hashtable has(key k) bool
	return self.get(key) is some

hashtable delete(key k)
	self.size -= 1

hashtable clear()
	num = self.capacity
	for i = 0, i < num, i += 1
		echo("delete me: " + to_str(i))
		self.table[i] = none
	self.size = 0

main
	m = hashtable(
		capacity: 12
		get_code: int_hashcode
		table: [0:12]maybe<hashtable_item<int,string>>)

	m.set(0, "kiwi")
	match m.get(0)
		some(out) => echo("1. " + out)
		none => echo("bad")
	echo("1. size: " + to_str(m.size))
	echo("---")

	m.set(0, "lemon")
	match m.get(0)
		some(out) => echo("2. " + out)
		none => echo("bad")
	echo("2. size: " + to_str(m.size))
	echo("---")

	m.set(4, "coconut")
	match m.get(4)
		some(out) => echo("3. " + out)
		none => echo("bad")
	echo("3. size: " + to_str(m.size))
	echo("---")

	m.delete(0)
	if m.get(0) is some
		echo("bad")
	echo("4. size: " + to_str(m.size))
	echo("---")

	m.set(5, "banana")
	m.set(8, "eggplant")
	m.set(13, "pickle")
	m.set(20, "cucumber")
	if m.get(5) is none : echo("bad")
	if m.get(8) is none : echo("bad")
	if m.get(13) is none : echo("bad")
	if m.get(20) is none : echo("bad")
	echo("5. size: " + to_str(m.size))
	echo("---")

	m.clear()
	if m.get(0) is some : echo("bad")
	echo("6. size: " + to_str(m.size))
	echo("---")
	
	o = hashtable<int, string>(
		size: 10
		capacity: 10
		get_code: int_hashcode)
