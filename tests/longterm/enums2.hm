type vec
  x int
  y int

type exception
  message string
  stack   string

enum snake
  python
  viper
  cobra

enum mammal
  mouse(int, string, vec)
  cat(string)
  dog(float)

enum bug<x>
  ant(x)
  bee
  
enum result<r>
  is(r)
  error(exception)
  
enum either<u, v>
  one(u)
  two(v)

immutable
  example = vec
  snap = snake.viper
  woof = mammal.dog(7.2)

main
  a = snake.cobra
  b = snake.viper
  if a = b
    echo("bad")
  else
    echo("a.index = " + to_str(a.index))
    echo("good")

  z = [10]snake

  c = mammal.cat("meow")
  d = mammal.cat("woof")
  (* if match c and d *)
  if c = d
  (* if c.index = d.index *)
    echo("good")
  else 
    echo("bad")

  example2 = vec
  e = mammal.dog(1.4)

  match e
    dog => echo("good")
    _ => echo("bad")

  me = calc_me(5)

  g = bug<int>.bee
  h = bug.ant(true)
  i = bug.ant(vec)
  j = bug.ant("buggie")

  (* echo(snake.python.index)
  echo(mammal.cat.index) *)

  (* f = mammal.mouse(42, "yo", vec) *)
  (* echo(f.0) *)

  (* todo match scope replace variables *)
  (* match f *)
  (*   mouse(x, y, z) => echo(y) *)
  (*   _ => echo("bad") *)

(* todo functions for generic types *)
(* bug<x>.has() bool *)
(*   match self *)
(*     is(v) => return true *)
(*     none => return false *)

(* bug<x>.unwrap() x *)
(*   match self *)
(*     is(v) => return v *)
(*     none => panic *)

(* todo functions for impl of specific generic type *)
(* bug<int>.unwrap() int *)
(*   return self.0 *)


