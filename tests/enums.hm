class vec
  x int
  y int

enum snake
  python
  viper
  cobra

enum mammal
  mouse(int, string, vec)
  cat(string)
  dog(float)

enum bug<x>
  ant(x, string)
  bee
  
enum result<r, e>
  is(r)
  error(e)

immutable
  example = vec
  snap = snake.viper
  woof = mammal.dog(7.2)

# bug<x> has() bool
#   match self
#     is(v) => return true
#     none => return false

# bug<x> unwrap() x
#   match self
#     is(v) => return v
#     none => panic

main
  a = snake.cobra
  b = snake.viper
  if a = b
    echo("bad")
  else 
    echo("good")

  c = mammal.cat("meow")
  d = mammal.cat("woof")
  if c = d
    echo("good")
  else 
    echo("bad")

  example2 = vec
  e = mammal.dog(1.4)
  # todo reference pointers: copy or not?
  # f = mammal.mouse(42, "yo", example)

  match e
    dog => echo("good")
    _ => echo("bad")

  # todo match scope replace variables
  # match f
  #   mouse(x, y, z) => echo(y)
  #   _ => echo("bad")

  # todo generics for enums
  # g = bug.bee
  # h = bug.ant(true, "buggie")
  # i = bug.ant(vec)
