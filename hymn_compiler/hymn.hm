#
#           The Hymn Compiler
# Copyright 2019 Nathan Michael McMillan
#

import program
import flags (flags)
import parser
import parse_error (parse_error)

import hymn:os
import hymn:fs
import hymn:result (result)
import hymn:path
import hymn:strings

static debug = true
static debug_tokens = true
static debug_ast = true
static debug_command = true

def help
    echo("Hymn command line interface.")
    echo("")
    echo("Usage:")
    echo("")
    echo("    hymn <command> [arguments]")
    echo("")
    echo("The commands are:")
    echo("")
    echo("    fmt      format a file")
    echo("    build    compile a program")
    echo("")

# TODO: fix C header spacing

def compile(f flags) result<string,parse_error>
    mutable source_out = path.abs(f.write_to)
    source_out = path.join(source_out, "src")

    stat = try fs.stat(f.path) catch(e)
        return result.error(parser.io_error(e.value))

    if stat.is_dir(): f.path = path.join(f.path, "main.hm")

    directory = path.abs(path.dir(f.path))
    echo("directory:", directory)

    mutable libc = os.get_env("HYMN_LIBC")
    if f.libc != "": libc = f.libc
    if libc == "": libc = "libc"
    libc = path.abs(libc)

    p = program.new()
    p.parse(f)

    return result.ok("success!")

def main(args []string)

    iterate i, a in args: printf("args %d: %s\n", i, a)
    
    pwd = strings.cut_end(system("pwd"), 1)
    home = strings.cut_end(system("echo \"$HOME\""), 1)

    echo("pwd:", pwd)
    echo("home:", home)

    f = flags.new()
    f.path = home + "/Documents/prorgamming/hymn-lang/hymn_std/math.hm"
    f.write_to = home + "/Documents/prorgamming/hymn-lang/out/math"

    if f.help or f.path == ""
        help()
        exit(1)

    ok = compile(f)
    match ok
        ok(o): echo("ok: " + o.value)
        error(e): echo("error: " + e.value.str())
