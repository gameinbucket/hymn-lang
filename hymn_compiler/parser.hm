import stream
import tokens (token)
import tokenizer (tokenizer)
import parse_error (parse_error)
import parse_code
import hymn_file (hymn_file)

import hymn:io

def io_error(e io.io_error) parse_error
    return parse_error(
        id: e.get_id()
        code: e.get_code()
        description: e.get_description()
        hint: e.get_hint()
    )

class parser
    module   hymn_file
    tokenize tokenizer
    tok      token
    pos      int
    line     int

def new(module hymn_file) parser
    data = cat(module.path)
    file_stream = stream.new(data)
    tokenize = tokenizer.new(file_stream)
    tok = tokenize.get(0)
    return parser(
        module: module
        tokenize: tokenize
        tok: tok
        pos: 0
        line: 1
    )

def parser.error(code int, reason string) parse_error
    return parse_error(
        line: self.line
        code: code
        description: reason
    )

def parser.peek() token
    return self.tokenize.get(self.pos + 1)

def parser.next()
    self.pos += 1
    tok = self.tokenize.get(self.pos)
    if tok.type == "line" or tok.type == "comment"
        self.line += 1
    self.tok = tok

def parser.verify(expected string) maybe<parse_error>
    if self.tok.type != expected
        return self.error(0, "Excepted " + expected + " but was " + self.tok.type)
    return none

def parser.eat(expected string) maybe<parse_error>
    try self.verify(expected)
    self.next()
    return none

def parser.statement() maybe<parse_error>
    return none

def parser.is_new_line() bool
    t = self.tok.type
    return t == "line" or (t == "comment" and self.peek().type == "line")

def parser.verify_new_line() maybe<parse_error>
    if self.is_new_line()
        return none
    return self.verify("line")

def parser.new_line() maybe<parse_error>
    t = self.tok.type
    if t == "line"
        self.next()
        return none
    elif t == "comment" and self.peek().type == "line"
        self.next()
        self.next()
        return none
    return self.verify("line")

def parser.unexpected_token() parse_error
    return self.error(parse_code.unexpected_token, "")

def parser.skip_lines()
    while self.tok.type != "eof"
        if self.tok.type != "line"
            break
        self.next()

def parser.parse() maybe<parse_error>
    out = self.module.out
    path = self.module.path
    echo("parse out:", out)
    echo("parse path:", path)
    echo("token:", self.tok.str())
    self.skip_lines()
    while self.tok.type != "eof"
        try self.statement()
        if self.is_new_line()
            self.new_line()
    
    return none
