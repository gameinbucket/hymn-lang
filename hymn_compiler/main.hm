#
#           The Hymn Compiler
# Copyright 2019 Nathan Michael McMillan
#

import program
import flags (flags)
import parser
import parse_error (parse_error)

import hymn:os
import hymn:fs
import hymn:result (result)
import hymn:path

static debug = true
static debug_tokens = true
static debug_ast = true
static debug_command = true

def help
    echo("Hymn command line interface.")
    echo("")
    echo("Usage:")
    echo("")
    echo("    hymn <command> [arguments]")
    echo("")
    echo("The commands are:")
    echo("")
    echo("    fmt      format a file")
    echo("    build    compile a program")
    echo("")

def compile(f flags) result<string,parse_error>
    mutable source_out = path.abs(f.write_to)
    source_out = path.join(source_out, "src")

    # todo: special `try` keyword will automatically insert match for result
    # todo: replace if X is Y with match X: Y

    # stat = try fs.stat(f.path)

    # stat = try fs.stat(f.path) catch(e)
    #     return result.error(parser.io_error(e.value))

    stat_result = fs.stat(f.path)
    stat fs.file_info
    match stat_result
        ok(r) stat = r.value
        error(e)
            # main does not know
            # result<%19.file_info,%17.io_error>.error

            # it should be passed along as
            # %20.result<%19.file_info,%17.io_error>.error

            # main should not care or parse it
            # need a global registry independent of module for looking up %uid types

            x = parser.io_error(e.value)
            z = result.error(x)
            return z

    if stat.is_dir()
        f.path = path.join(f.path, "main.hm")

    directory = path.abs(path.dir(f.path))

    mutable libc = os.get_env("HYMN_LIBC")
    if f.libc != "": libc = f.libc
    if libc == "": libc = "libc"
    libc = path.abs(libc)

    p = program.new()
    p.parse(f)
    return result.ok("")

def main(args []string)

    iterate i, a in args
        printf("args %d: %s\n", i, a)
    
    flag = flags.new()
    flag.path = "tests/math.hm"
    flag.write_to = "out/math"

    if flag.help or flag.path == ""
        help()
        exit(1)

    ok = compile()
    
    # match ok: error(e)
    if ok is error(e)
        echo("error: " + e.value.str())
        exit(1)

    if ok is ok(r)
        echo(r.value)
